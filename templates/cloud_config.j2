#cloud-config
write_files:
  - path: /home/core/install_docker_compose
    owner: core:core
    permissions: 0744
    content: |
      #!/bin/sh
      mkdir -p /opt/bin
      curl -L https://github.com/docker/compose/releases/download/{{ wimpy_docker_compose_version }}/docker-compose-Linux-x86_64 > /opt/bin/docker-compose
      chmod +x /opt/bin/docker-compose
  - path: /home/core/docker-compose.yml
    owner: core:core
    permissions: 0644
{% if wimpy_docker_compose_file_provided.stat.exists %}
    content: |
      {{ lookup('file', wimpy_docker_compose_file) | regex_replace('image: \"?([a-zA-Z0-9_\$\{\}/.:-]+)\"?', 'image: \\1:' + wimpy_release_version) | indent(6, False) }}
{% else %}
    content: |
      {{ lookup('file', '/tmp/docker-compose_' ~ wimpy_deploy_id ~ '.yml') | indent(6, False) }}
{% endif %}

  - path: /home/core/healthcheck.sh
    owner: core:core
    permissions: 0744
    content: |
      {{ lookup('file', role_path + '/files/healthcheck.sh') | indent(6, False) }}

  {% if wimpy_aws_cloudwatch_enabled -%}
  - path: /home/core/cloudwatch.conf
    owner: core:core
    permissions: 0744
    content: |
      log_group = "/{{ wimpy_deployment_environment }}/{{ wimpy_application_name }}"
      state_file = "/var/log/journald-cloudwatch-logs/state"
      log_priority = {{ wimpy_aws_cloudwatch_log_level }}
  - path: /home/core/install_cloudwatch_agent
    owner: core:core
    permissions: 0744
    content: |
      #!/bin/sh
      mkdir -p /opt/bin
      mkdir -p /var/log/journald-cloudwatch-logs/state
      curl -L https://github.com/advantageous/systemd-cloud-watch/releases/download/v0.2.1/systemd-cloud-watch_linux > /opt/bin/journald-cloudwatch-logs
      chmod +x /opt/bin/journald-cloudwatch-logs
  {% endif %}

coreos:
  units:
    - name: update-engine.service
      mask: true
      command: stop

    - name: locksmithd.service
      mask: true
      command: stop

    - name: "{{ wimpy_application_name }}.service"
      command: "start"
      content: |
        [Unit]
        Description={{ wimpy_application_name }} container
        After=install_docker_compose.service
        Requires=install_docker_compose.service

        [Service]
        TimeoutStartSec={{ wimpy_application_bootstrap_timeout }}
        User=core
        Restart=always
        Environment=ENVIRONMENT={{ wimpy_deployment_environment }}
        Environment=PORT={{ wimpy_application_port }}
        Environment=DOCKER_REGISTRY={{ wimpy_docker_registry }}
        Environment=KMS_MASTER_KEY={{ wimpy_aws_kms_key }}
        Environment=S3_BUCKET={{ wimpy_aws_s3_application_bucket }}
{% for env_key, env_value in wimpy_application_environment_vars.items() %}
        Environment={{ env_key }}={{ env_value }}
{% endfor %}
{% if wimpy_docker_login is defined %}
        ExecStartPre={{ wimpy_docker_login }}
{% endif %}
{% for pre_cmd in wimpy_application_pre_commands %}
        ExecStartPre={{ pre_cmd }}
{% endfor %}
        ExecStartPre=/usr/bin/docker pull {{ wimpy_docker_image_name }}:{{ wimpy_release_version }}
        ExecStart=/opt/bin/docker-compose -f /home/core/docker-compose.yml up
{% for post_cmd in wimpy_application_post_commands %}
        ExecStartPost={{ post_cmd }}
{% endfor %}
        ExecStartPost=/home/core/healthcheck.sh "{{ wimpy_asg_name }}" "{{ wimpy_aws_elb_enable }}" AutoscalingGroup "{{ wimpy_aws_region }}" "{{ wimpy_aws_elb_healthcheck_interval }}"
        ExecStop=/opt/bin/docker-compose -f /home/core/docker-compose.yml down

        [Install]
        WantedBy=multi-user.target
    - name: install_docker_compose.service
      command: "start"
      content: |
        [Unit]
        Description=Install docker-compose
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/home/core/install_docker_compose

    {% if wimpy_aws_cloudwatch_enabled -%}
    - name: install_cloudwatch_agent.service
      command: "start"
      content: |
        [Unit]
        Description=Install CloudWatch agent
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/home/core/install_cloudwatch_agent

    - name: cloudwatch.service
      command: "start"
      content: |
        [Unit]
        Description=journald-cloudwatch-logs
        Wants=basic.target
        After=basic.target network.target

        [Service]
        User=core
        Group=core
        ExecStart=/opt/bin/journald-cloudwatch-logs /home/core/cloudwatch.conf
        KillMode=process
        Restart=on-failure

        [Install]
        WantedBy=getty.target
    {% endif %}

{% for unit in wimpy_application_additional_units %}
    {{ unit }}
{% endfor %}
